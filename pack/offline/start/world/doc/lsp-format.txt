==============================================================================
                                        *lsp-format.txt* *offworld.lsp-format*

Format the current buffer using the right built-in functions. In other words,
backsward compatible formatting functions.

==============================================================================
Lua API                                             *offworld.lsp-format-api*

                                    *offworld.lsp-format.buffer_autoformat()*
.buffer_autoformat({client}, {bufnr}, {opts}): ~
    Format the current buffer using the active language servers.

    - {client}: ~
      (Table, Optional) if provided it must be a lua table with a `name`
      property or an instance of |vim.lsp.client()|. If provided it will only
      use the LSP server associated with that client.

    - {bufnr}: ~
      (Number, Optional) if provided it must be the id of an open buffer.

    - {opts}: ~
      (Table, optional). Configuration that will passed to the formatting
      function. It supports the following properties:

        - timeout_ms: (Number, optional). Time in milliseconds to block for
          formatting requests. Defaults to `10000`.

        - formatting_options: (Table, optional). Can be used to set
          `FormattingOptions`, these options are sent to the language server.
          See https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#formattingOptions

    Tabs and indents can change after the LSP formats the code in the file. Read
    the documentation of the LSP servers you are using, figure out how to
    configure it to your prefered style.
>lua
    local lsp = require('offworld.lsp-client')

    lsp.on_attach(function(client, bufnr)
      if client.supports_method('textDocument/formatting') then
        require('offworld.lsp-format').buffer_autoformat(client, bufnr)
      end
    end)
<
                                       *offworld.lsp-format.format_command()*
.format_command({input}): ~
    It can be used to create a user command that formats the current buffer.

    This function only exists to ensure compatibility with Neovim v0.7. It's
    the function being using by the command `LspFormat`.

==============================================================================

vim:tw=78:ft=help:norl
