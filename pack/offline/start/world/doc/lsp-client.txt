==============================================================================
                                               *lsp-client.txt* *offworld.lsp*

Collection of functions that implement common features and patterns used by
many people in the community.

==============================================================================
Configure a language server                           *offworld.lsp-configure*

To configure a language server you need to know three things:

1. The command that starts the server
2. The filetypes in which the server should be active
3. A way to detect the "root directory" of your project

What this means is that you **have to** do some research before you configure
anything. 

Once you have all that information you can use the function .new_client() from
the module `offworld.lsp-client`.

Here is an example configuration for the lua language server:
>lua
  local lsp = require('offworld.lsp-client')
  local dir = require('offworld.dir')

  lsp.new_client({
    name = 'lua_ls',
    cmd = {'lua-language-server'},
    filetypes = {'lua'},
    root_dir = function(bufnr)
      return dir.find_first(bufnr, {'.luarc.json'})
    end,
  })
<
Where can you go to find out what configuration you need? You can start in the
documentation of the plugin `lspconfig`.

You can find a list of language servers here

https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md

And you can get the configuration in the source code, here

https://github.com/neovim/nvim-lspconfig/tree/master/lua/lspconfig/server_configurations

==============================================================================
Custom keymaps                                          *offworld.lsp-keymaps*

Once you have a language server configured and ready to go you can start
creating the keymaps.

A common convention here is to create the keymaps only when the language
server is active in the current. To make this easier you can set the option
`lsp_attach` of the module `offworld.settings`
>lua
  local offworld = require('offworld.settings')

  offworld.lsp_attach = function(client, bufnr)
    local bufmap = function(mode, lhs, rhs)
      vim.keymap.set(mode, lhs, rhs, {buffer = bufnr})
    end

    bufmap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<cr>')
    bufmap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<cr>')
    bufmap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<cr>')
    bufmap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<cr>')
    bufmap('n', 'go', '<cmd>lua vim.lsp.buf.type_definition()<cr>')
    bufmap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<cr>')
    bufmap('n', 'gs', '<cmd>lua vim.lsp.buf.signature_help()<cr>')

    bufmap('n', '<F2>', '<cmd>lua vim.lsp.buf.rename()<cr>')
    bufmap({'n', 'x'}, '<F3>', '<cmd>LspFormat!<cr>')
    bufmap('n', '<F4>', '<cmd>lua vim.lsp.buf.code_action()<cr>')
  end
<
If you want details about what each function can do, read their
documentation in the help page. For example, `:help vim.lsp.buf.hover()`.

==============================================================================
Root directory                                         *offworld.lsp-root-dir*

This is a very important concept you need to keep in mind. The "root
directory" is basically your project folder. 

When you open a file compatible with a language server, Neovim will execute
the function `root_dir`, the one in the language server configuration. If this
function returns a path, that will be your root directory.

To make this process easy you can use the function `.root_pattern()`. This
will search for a set of files in the current folder (your working directory)
or any of the parent folders. If it finds them, the language server will start
analyzing that folder.

Let's say you have the lua language server installed, if you want it to detect
the root directory of your Neovim config you can create a file called
`.luarc.json` in the same folder your `init.lua` is located. And then you can
configure the server this way:
>lua
  local lsp = require('offworld.lsp-client')
  local dir = require('offworld.dir')

  lsp.new_client({
    name = 'lua_ls',
    cmd = {'lua-language-server'},
    filetypes = {'lua'},
    root_dir = function(bufnr)
      return dir.find_first(bufnr, {'.luarc.json'})
    end,
  })
<
You can always implement the logic `root_dir` if you need it. Assign a
function and return a string with a path.
>lua
  lsp.new_client({
    name = 'lua_ls',
    cmd = {'lua-language-server'},
    filetypes = {'lua'},
    root_dir = function()
      ---
      -- do whatever you want here
      ---
    end,
  })
<
==============================================================================
Settings                                               *offworld.lsp-settings*

                                              *offworld.settings.lsp_attach()*
.lsp_attach({client}, {bufnr}): ~
    Callback function that will be invoked when a language server is attached
    to a buffer.
>lua
    local offworld = require('offworld.settings')

    offworld.lsp_attach = function(client, bufnr)
      print('hello world')
    end
<
                                                 *offworld.settings.lspconfig*
.lspconfig: ~
    List of key/value pairs functions. The callbacks listed here should return
    a lua table compatible with the argument of |offworld.lsp.new_client()|.
    These language servers can be called using the command |:LspSetup|.
>lua
    local offworld = require('offworld.settings')

    offworld.lspconfig.lua_ls = function()
      local dir = require('offworld.dir')

      return {
        cmd = {'lua-language-server'},
        filetypes = {'lua'},
        root_dir = function(bufnr)
          return dir.find_first(bufnr, {'.luarc.json'})
        end,
      }
    end
<
                                           *offworld.settings.ui.virtual_text*
.ui.virtual_text: ~
    Enable virtual text for diagnostics.

                                           *offworld.settings.ui.float_border*
.ui.float_border: ~
    Set the style of the border of diagnostic floating window, hover window and
    signature help window. These are valid the styles: `'none'`, `'single'`,
    `'double'`, `'rounded'`, `'solid'` or `'shadow'`.

                                              *offworld.settings.ui.sign_text*
.ui.sign_text: ~
    If the value is `true` it will make sure diagnostic signs are enable and
    reserve a space in the signcolumn. If the value is `false` it will disable
    the diagnostics signs. If the value is a table, it can modify the text of
    the diagnostic signs using these properties:

        • error
        • warn
        • hint
        • info

==============================================================================
Commands                                               *offworld.lsp-commands*

                                                                   *:LspSetup*
LspSetup {server}: ~
    Start the `{server}` using the configuration provided in
    |offworld.settings.lspconfig|. 

    If the "bang" is provided the current working directory will be used as
    the root directory for the language server.

                                                                  *:LspFormat*
LspFormat {server} timeout={timeout}: ~
    Formats the current buffer or range.

    If the "bang" is provided formatting will be asynchronous.

    If you provide the name of a language server as a first argument it will
    try to format only using that server. Otherwise, it will use every active
    language server with formatting capabilities.

    With the {timeout} parameter you can configure the time in milliseconds to
    wait for the response of the formatting requests.

==============================================================================
Lua API                                                     *offworld.lsp-api*

                                                   *offworld.lsp.new_client()*
.new_client({opts}): ~
    This will execute a user provided function to detect the root directory of
    the project when Neovim assigns the file type for a buffer. If the root
    directory is detected the language server will be attached to the file.

    {opts} supports every property |vim.lsp.start_client()| supports with a
    few changes:

        - filestypes: ~
          (String or Table) This can be any pattern the FileType autocommand
          accepts.

        - root_dir: ~
          (Function) This will be executed after Neovim assigns the file type
          for a buffer. If it returns a string that will be considered the
          root directory for the project.

    Other important properties are:

        - cmd: ~
          (Table) A lua table with the arguments necessary to start the
          language server.

        - name: ~
          (String) This is the name Neovim will assign to the client object.

        - on_attach: ~
          (Function) A function that will be executed after the language
          server gets attached to a buffer.

==============================================================================

vim:tw=78:ft=help:norl

